name: ci-build
on:
  push:
    branches: ["main"]
  pull_request:
    branches: ["main"]
  workflow_dispatch:  # 手动触发保留
env:
  CARGO_TERM_COLOR: always
jobs:
  release-build:
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v4

      # 改动1：指定支持API 35的NDK版本（如r28b），而非拉取最新版（避免兼容性问题）
      - name: Setup ndk
        run: |
          # 直接下载支持API 35的NDK r28b（稳定版，兼容cargo-ndk最新版）
          ndk_url="https://dl.google.com/android/repository/android-ndk-r28b-linux.zip"
          wget -O ndk.zip $ndk_url -nv
          mkdir ~/ndk_temp
          unzip ndk.zip -d ~/ndk_temp 2>&1 > /dev/null
          # 修复NDK解压后的路径（确保ANDROID_NDK_HOME指向正确目录）
          mv ~/ndk_temp/android-ndk-r28b/* ~/ndk_temp/

      - name: Setup rust toolchains
        run: |
          rustup default nightly
          rustup target add aarch64-linux-android armv7-linux-androideabi x86_64-linux-android i686-linux-android
          rustup component add rust-src
          rustup update

      # 改动2：安装最新版cargo-ndk（支持API 35），避免默认安装旧版本
      - name: Install cargo ndk
        run: cargo install cargo-ndk --version 4.2.2 --locked

      - name: Other deps
        run: |
          sudo apt update
          sudo apt install gcc-multilib

      - name: Build
        run: |
          export ANDROID_NDK_HOME=$(realpath ~/ndk_temp)
          export ANDROID_NDK_ROOT=$ANDROID_NDK_HOME
          export RUSTFLAGS="-C default-linker-libraries"
          rm -rf .cargo Cargo.lock
          python3 ./make.py build --release --nightly

      - name: Prepare artifacts
        run: |
          mkdir -p output/artifact/release
          unzip "output/PJZ110_sampling_controller_release_*.zip" -d output/artifact/release

      - name: Upload release version
        uses: actions/upload-artifact@v4
        with:
          name: pjz110_sampling_controller(release)
          compression-level: 9
          path: output/artifact/release
